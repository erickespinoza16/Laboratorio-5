
module update(
  input logic clk,
  input logic pulso,
input logic vsync,
input logic [1:0]indice,
output logic [9:0] posx,
output logic [9:0] posy
    );
      parameter
//      XMAX = 10'd640,
//      YMAX = 10'd480,
//      XMAX = 10'd316,
//      YMAX = 10'd236,
//      TAM  = 10'd16;
      XMAX1 = 10'd316,
      YMAX1 = 10'd236,
      XMAX2 = 10'd638,
      YMAX2 = 10'd236,
      XMAX3 = 10'd316,
      YMAX3 = 10'd478,
      XMAX4 = 10'd638,
      YMAX4 = 10'd478,
      TAM  = 10'd16;

    initial begin
//      posx = 10'd320;  // incialmente, centro de la pantalla
//      posy = 10'd240;  // para una pantalla de 640x480, claro.
      posx <= 10'd10;  // incialmente, centro de la pantalla
      posy <= 10'd10;  // para una pantalla de 640x480, claro.
//        if(indice == 2'b00)begin
//              posx = 10'd10;  // incialmente, centro de la pantalla
//              posy = 10'd10;  // para una pantalla de 640x480, claro.
//        end
//        if(indice == 2'b01)begin
//              posx = 10'd330;  // incialmente, centro de la pantalla
//              posy = 10'd10;  // para una pantalla de 640x480, claro.
//        end
//        if(indice == 2'b10)begin
//              posx = 10'd10;  // incialmente, centro de la pantalla
//              posy = 10'd250;  // para una pantalla de 640x480, claro.
//        end
//        if(indice == 2'b11)begin
//              posx = 10'd330;  // incialmente, centro de la pantalla
//              posy = 10'd250;  // para una pantalla de 640x480, claro.
//        end
    end
//          always@(pulso)
//          begin

//          end
    reg vsync_prev = 1'b0;
    reg dx = 1'b0;  // 0: mover a la derecha. 1: mover a la izquierda
    reg dy = 1'b0;  // 0: mover hacia abajo. 1: mover hacia arriba
    
    always @(posedge clk)
      vsync_prev <= vsync;    
    wire actualizar_ahora = vsync_prev & ~vsync;  // momento en el que vsync pasa de 1 a 0 (flanco de bajada)
    
    always @(posedge clk) begin

//      if (actualizar_ahora == 1'b1) begin
//        if (posx == XMAX-TAM && dx == 1'b0 || posx == 10'd1 && dx == 1'b1)  // si llegamos al borde izquierdo o derecho, cambiar sentido de movimiento horizontal
//          dx <= ~dx;
//        if (posy == YMAX-TAM && dy == 1'b0 || posy == 10'd1 && dy == 1'b1)  // si llegamos al borde inferior o superior, cambiar sentido de movimiento vertical
//          dy <= ~dy;
//        posx <= posx + {{9{dx}}, 1'b1};  // si dx=0, esto hace que se sume 00000000001 a posx. Si dx=1, esto hace que se sume 11111111111 a posx.
//        posy <= posy + {{9{dy}}, 1'b1};  // lo mismo, pero con dy y posy
//      end
         if(indice == 2'b00&&pulso ==1)begin
              posx <= 10'd10;  // incialmente, centro de la pantalla
              posy <= 10'd10;  // para una pantalla de 640x480, claro.
        end
        if(indice == 2'b01&&pulso ==1)begin
              posx <= 10'd330;  // incialmente, centro de la pantalla
              posy <= 10'd10;  // para una pantalla de 640x480, claro.
        end
        if(indice == 2'b10&&pulso ==1)begin
              posx <= 10'd10;  // incialmente, centro de la pantalla
              posy <= 10'd250;  // para una pantalla de 640x480, claro.
        end
        if(indice == 2'b11&&pulso ==1)begin
              posx <= 10'd330;  // incialmente, centro de la pantalla
              posy <= 10'd250;  // para una pantalla de 640x480, claro.
        end
        else
        begin
      if (actualizar_ahora == 1'b1&&indice==2'b00) begin
          if (posx == XMAX1-TAM && dx == 1'b0 || posx == 10'd1 && dx == 1'b1)  // si llegamos al borde izquierdo o derecho, cambiar sentido de movimiento horizontal
            dx <= ~dx;
          if (posy == YMAX1-TAM && dy == 1'b0 || posy == 10'd1 && dy == 1'b1)  // si llegamos al borde inferior o superior, cambiar sentido de movimiento vertical
            dy <= ~dy;
          posx <= posx + {{9{dx}}, 1'b1};  // si dx=0, esto hace que se sume 00000000001 a posx. Si dx=1, esto hace que se sume 11111111111 a posx.
          posy <= posy + {{9{dy}}, 1'b1};  // lo mismo, pero con dy y posy
        end
      if (actualizar_ahora == 1'b1&&indice==2'b01) begin
            if (posx == XMAX2-TAM && dx == 1'b0 || posx == 10'd321 && dx == 1'b1)  // si llegamos al borde izquierdo o derecho, cambiar sentido de movimiento horizontal
              dx <= ~dx;
            if (posy == YMAX2-TAM && dy == 1'b0 || posy == 10'd1 && dy == 1'b1)  // si llegamos al borde inferior o superior, cambiar sentido de movimiento vertical
              dy <= ~dy;
            posx <= posx + {{9{dx}}, 1'b1};  // si dx=0, esto hace que se sume 00000000001 a posx. Si dx=1, esto hace que se sume 11111111111 a posx.
            posy <= posy + {{9{dy}}, 1'b1};  // lo mismo, pero con dy y posy
          end
      if (actualizar_ahora == 1'b1&&indice==2'b10) begin
                if (posx == XMAX3-TAM && dx == 1'b0 || posx == 10'd1 && dx == 1'b1)  // si llegamos al borde izquierdo o derecho, cambiar sentido de movimiento horizontal
                  dx <= ~dx;
                if (posy == YMAX3-TAM && dy == 1'b0 || posy == 10'd241 && dy == 1'b1)  // si llegamos al borde inferior o superior, cambiar sentido de movimiento vertical
                  dy <= ~dy;
                posx <= posx + {{9{dx}}, 1'b1};  // si dx=0, esto hace que se sume 00000000001 a posx. Si dx=1, esto hace que se sume 11111111111 a posx.
                posy <= posy + {{9{dy}}, 1'b1};  // lo mismo, pero con dy y posy
              end
       if (actualizar_ahora == 1'b1&&indice==2'b11) begin
                    if (posx == XMAX4-TAM && dx == 1'b0 || posx == 10'd321 && dx == 1'b1)  // si llegamos al borde izquierdo o derecho, cambiar sentido de movimiento horizontal
                      dx <= ~dx;
                    if (posy == YMAX4-TAM && dy == 1'b0 || posy == 10'd241 && dy == 1'b1)  // si llegamos al borde inferior o superior, cambiar sentido de movimiento vertical
                      dy <= ~dy;
                    posx <= posx + {{9{dx}}, 1'b1};  // si dx=0, esto hace que se sume 00000000001 a posx. Si dx=1, esto hace que se sume 11111111111 a posx.
                    posy <= posy + {{9{dy}}, 1'b1};  // lo mismo, pero con dy y posy
                  end
                  end
    end
endmodule
